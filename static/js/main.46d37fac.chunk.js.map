{"version":3,"sources":["Components/MemeApp/index.js","App.js","serviceWorker.js","index.js"],"names":["photos","src","initialState","toptext","bottomtext","isTopDragging","isBottomDragging","topX","topY","bottomX","bottomY","MemeApp","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","openImage","index","image","base_image","Image","base64","getBase64Image","setState","prevState","objectSpread","currentImage","modalIsOpen","currentImagebase64","toggle","changeText","event","defineProperty","currentTarget","name","value","getStateObj","e","type","rect","imageRef","getBoundingClientRect","xOffset","clientX","left","yOffset","clientY","top","stateObj","concat","handleMouseDown","document","addEventListener","handleMouseMove","state","handleMouseUp","removeEventListener","convertSvgToImage","svg","svgRef","svgData","XMLSerializer","serializeToString","canvas","createElement","setAttribute","svgSize","width","height","img","btoa","unescape","encodeURIComponent","onload","getContext","drawImage","canvasdata","toDataURL","a","download","href","body","appendChild","click","_this2","newWidth","newHeight","textStyle","fontFamily","fontSize","textTransform","fill","stroke","userSelect","react_default","className","NavbarBrand","map","key","style","cursor","alt","onClick","role","Modal","isOpen","ModalHeader","ModalBody","id","ref","el","xmlns","xmlnsXlink","xlinkHref","zIndex","x","y","dominantBaseline","textAnchor","onMouseDown","onMouseUp","FormGroup","Label","for","placeholder","onChange","React","Component","App","Components_MemeApp","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46d37fac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormGroup,\r\n  Label,\r\n  NavbarBrand\r\n} from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst photos = [\r\n  { src: \"/images/disaster.jpg\" },\r\n  { src: \"/images/chairtable.jpg\" },\r\n  { src: \"/images/chuck-norris.jpg\" },\r\n  { src: \"/images/civil-war.jpg\" },\r\n  { src: \"/images/creepy-smirk.jpg\" },\r\n  { src: \"/images/crying-woman.jpg\" },\r\n  { src: \"/images/doubtful-kid.jpg\" },\r\n  { src: \"/images/eyyy.jpg\" },\r\n  { src: \"/images/interesting-man.jpg\" },\r\n  { src: \"/images/leo.jpg\" },\r\n  { src: \"/images/like-this.jpg\" },\r\n  { src: \"/images/lion.jpg\" },\r\n  { src: \"/images/minions.jpg\" },\r\n  { src: \"/images/no-way.jpg\" },\r\n  { src: \"/images/one-does-not-simply.jpg\" },\r\n  { src: \"/images/parked.jpg\" },\r\n  { src: \"/images/party.jpg\" },\r\n  { src: \"/images/right-now.jpg\" },\r\n  { src: \"/images/robert.jpg\" },\r\n  { src: \"/images/sad-chicken.jpg\" },\r\n  { src: \"/images/social-awkward.jpg\" }\r\n];\r\n\r\nconst initialState = {\r\n  toptext: \"\", // top caption\r\n  bottomtext: \"\", // bottom caption\r\n  isTopDragging: false, // initializing top text position\r\n  isBottomDragging: false, // initializing bottom text position\r\n  // X and Y cordinates of the top caption\r\n  topX: \"50%\",\r\n  topY: \"10%\",\r\n  // X and Y cordinates of bottom caption\r\n  bottomX: \"50%\",\r\n  bottomY: \"90%\"\r\n};\r\n\r\nclass MemeApp extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentImage: 0,\r\n      modalIsOpen: false,\r\n      currentImagebase64: null,\r\n      // letting initialState take values from state object.\r\n      ...initialState\r\n    };\r\n  }\r\n\r\n  openImage = index => {\r\n    const image = photos[index];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    const base64 = this.getBase64Image(base_image); // a function to convert image into data URI\r\n\r\n    // working with currently selected image\r\n    this.setState(prevState => ({\r\n      currentImage: index,\r\n      modalIsOpen: !prevState.modalIsOpen,\r\n      currentImagebase64: base64,\r\n      ...initialState\r\n    }));\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      modalIsOpen: !prevState.modalIsOpen\r\n    }));\r\n  };\r\n\r\n  changeText = event => {\r\n    this.setState({\r\n      [event.currentTarget.name]: event.currentTarget.value\r\n    });\r\n  };\r\n\r\n  getStateObj = (e, type) => {\r\n    let rect = this.imageRef.getBoundingClientRect();\r\n    const xOffset = e.clientX - rect.left;\r\n    const yOffset = e.clientY - rect.top;\r\n    let stateObj = {};\r\n    if (type === \"bottom\") {\r\n      stateObj = {\r\n        isBottomDragging: true,\r\n        isTopDragging: false,\r\n        bottomX: `${xOffset}px`,\r\n        bottomY: `${yOffset}px`\r\n      };\r\n    } else if (type === \"top\") {\r\n      stateObj = {\r\n        isTopDragging: true,\r\n        isBottomDragging: false,\r\n        topX: `${xOffset}px`,\r\n        topY: `${yOffset}px`\r\n      };\r\n    }\r\n    return stateObj;\r\n  };\r\n\r\n  handleMouseDown = (e, type) => {\r\n    const stateObj = this.getStateObj(e, type);\r\n    document.addEventListener(\"mousemove\", event =>\r\n      this.handleMouseMove(event, type)\r\n    );\r\n    this.setState({\r\n      ...stateObj\r\n    });\r\n  };\r\n\r\n  handleMouseMove = (e, type) => {\r\n    if (this.state.isTopDragging || this.state.isBottomDragging) {\r\n      let stateObj = {};\r\n      if (type === \"bottom\" && this.state.isBottomDragging) {\r\n        stateObj = this.getStateObj(e, type);\r\n      } else if (type === \"top\" && this.state.isTopDragging) {\r\n        stateObj = this.getStateObj(e, type);\r\n      }\r\n      this.setState({\r\n        ...stateObj\r\n      });\r\n    }\r\n  };\r\n\r\n  handleMouseUp = event => {\r\n    document.removeEventListener(\"mousemove\", this.handleMouseMove);\r\n    this.setState({\r\n      isTopDragging: false,\r\n      isBottomDragging: false\r\n    });\r\n  };\r\n\r\n  convertSvgToImage = () => {\r\n    const svg = this.svgRef;\r\n    let svgData = new XMLSerializer().serializeToString(svg);\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.setAttribute(\"id\", \"canvas\");\r\n    const svgSize = svg.getBoundingClientRect();\r\n    canvas.width = svgSize.width;\r\n    canvas.height = svgSize.height;\r\n    const img = document.createElement(\"img\");\r\n    img.setAttribute(\r\n      \"src\",\r\n      \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData)))\r\n    );\r\n    img.onload = function() {\r\n      canvas.getContext(\"2d\").drawImage(img, 0, 0);\r\n      const canvasdata = canvas.toDataURL(\"image/png\");\r\n      const a = document.createElement(\"a\");\r\n      a.download = \"meme.png\";\r\n      a.href = canvasdata;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n    };\r\n  };\r\n\r\n  getBase64Image(img) {\r\n    // a function to convert image into data URI\r\n    // need to create canvas for letting them edit selected image\r\n    var canvas = document.createElement(\"canvas\");\r\n    canvas.width = img.width;\r\n    canvas.height = img.height;\r\n    var ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(img, 0, 0);\r\n    // useful resource: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\r\n    var dataURL = canvas.toDataURL(\"image/png\");\r\n    return dataURL;\r\n  }\r\n\r\n  render() {\r\n    const image = photos[this.state.currentImage];\r\n    const base_image = new Image();\r\n    base_image.src = image.src;\r\n    var newWidth = base_image.width;\r\n    var newHeight = base_image.height;\r\n    const textStyle = {\r\n      fontFamily: \"Impact\",\r\n      fontSize: \"50px\",\r\n      textTransform: \"uppercase\",\r\n      fill: \"#FFF\",\r\n      stroke: \"#000\",\r\n      userSelect: \"none\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"main-content\">\r\n          <div className=\"sidebar\">\r\n            <NavbarBrand href=\"/\">MEME APP - BUILT ON REACT</NavbarBrand>\r\n            <p>\r\n              Click on any image. Edit top and bottom text. Download it. Enjoy\r\n              your new meme.\r\n            </p>\r\n          </div>\r\n          <div className=\"content\">\r\n            {photos.map((image, index) => (\r\n              <div className=\"image-holder\" key={image.src}>\r\n                <span className=\"meme-top-caption\">Top text</span>\r\n                <img\r\n                  style={{\r\n                    width: \"100%\",\r\n                    cursor: \"pointer\",\r\n                    height: \"100%\"\r\n                  }}\r\n                  alt={index}\r\n                  src={\".\" + image.src}\r\n                  onClick={() => this.openImage(index)}\r\n                  role=\"presentation\"\r\n                />\r\n                <span className=\"meme-bottom-caption\">Bottom text</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <Modal className=\"meme-gen-modal\" isOpen={this.state.modalIsOpen}>\r\n          <ModalHeader toggle={this.toggle}>Make-a-Meme</ModalHeader>\r\n          <ModalBody>\r\n            <svg\r\n              width={newWidth}\r\n              height={newHeight}\r\n              id=\"svg_ref\"\r\n              ref={el => {\r\n                this.svgRef = el;\r\n              }}\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n            >\r\n              <image\r\n                ref={el => {\r\n                  this.imageRef = el;\r\n                }}\r\n                xlinkHref={this.state.currentImagebase64}\r\n                height={newHeight}\r\n                width={newWidth}\r\n              />\r\n              <text\r\n                style={{\r\n                  ...textStyle,\r\n                  zIndex: this.state.isTopDragging ? 4 : 1\r\n                }}\r\n                x={this.state.topX}\r\n                y={this.state.topY}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n                onMouseDown={event => this.handleMouseDown(event, \"top\")}\r\n                onMouseUp={event => this.handleMouseUp(event, \"top\")}\r\n              >\r\n                {this.state.toptext}\r\n              </text>\r\n              <text\r\n                style={textStyle}\r\n                dominantBaseline=\"middle\"\r\n                textAnchor=\"middle\"\r\n                x={this.state.bottomX}\r\n                y={this.state.bottomY}\r\n                onMouseDown={event => this.handleMouseDown(event, \"bottom\")}\r\n                onMouseUp={event => this.handleMouseUp(event, \"bottom\")}\r\n              >\r\n                {this.state.bottomtext}\r\n              </text>\r\n            </svg>\r\n            <div className=\"meme-form\">\r\n              <FormGroup>\r\n                <Label for=\"toptext\">Top Text</Label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"toptext\"\r\n                  id=\"toptext\"\r\n                  placeholder=\"Add text to the top\"\r\n                  onChange={this.changeText}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <Label for=\"bottomtext\">Bottom Text</Label>\r\n                <input\r\n                  className=\"form-control\"\r\n                  type=\"text\"\r\n                  name=\"bottomtext\"\r\n                  id=\"bottomtext\"\r\n                  placeholder=\"Add text to the bottom\"\r\n                  onChange={this.changeText}\r\n                />\r\n              </FormGroup>\r\n              <button\r\n                onClick={() => this.convertSvgToImage()}\r\n                className=\"btn btn-primary\"\r\n              >\r\n                Download Your Meme\r\n              </button>\r\n            </div>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeApp;\r\n","import React, { Component } from \"react\";\nimport MemeApp from \"./Components/MemeApp\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return <MemeApp />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}